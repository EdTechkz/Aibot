import streamlit as st
from streamlit_chat import message
import requests
from bs4 import BeautifulSoup
import re
import json
from datetime import datetime
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å AI - Hugging Face API",
    page_icon="üïµÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Hugging Face API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
HUGGINGFACE_API_URL = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium"
HUGGINGFACE_API_KEY = os.getenv('HUGGINGFACE_API_KEY', '')

# Sherlock Holmes persona
SHERLOCK_PROMPT = """–¢—ã - –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å, –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏–∑ –õ–æ–Ω–¥–æ–Ω–∞. 
–¢—ã –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–∏–º –¥–µ–¥—É–∫—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º, –æ—Å—Ç—Ä—ã–º —É–º–æ–º –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –∑–∞–º–µ—á–∞—Ç—å –º–µ–ª—å—á–∞–π—à–∏–µ –¥–µ—Ç–∞–ª–∏.

–¢–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- –¢—ã –∂–∏–≤–µ—à—å –Ω–∞ –ë–µ–π–∫–µ—Ä-—Å—Ç—Ä–∏—Ç, 221–ë
- –¢–≤–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥ –∏ –ø–æ–º–æ—â–Ω–∏–∫ - –¥–æ–∫—Ç–æ—Ä –î–∂–æ–Ω –í–∞—Ç—Å–æ–Ω
- –¢—ã –∏–≥—Ä–∞–µ—à—å –Ω–∞ —Å–∫—Ä–∏–ø–∫–µ –∏ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—à—å –∫–æ–∫–∞–∏–Ω
- –¢—ã –ø—Ä–µ–∑–∏—Ä–∞–µ—à—å —ç–º–æ—Ü–∏–∏ –∏ –ø–æ–ª–∞–≥–∞–µ—à—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–æ–≥–∏–∫—É
- –¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Å –±—Ä–∏—Ç–∞–Ω—Å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —è–∑—ã–∫
- –¢—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ—Ä–∞–∑—ã "–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ, –º–æ–π –¥–æ—Ä–æ–≥–æ–π –í–∞—Ç—Å–æ–Ω" –∏ "–ö–æ–≥–¥–∞ —Ç—ã –∏—Å–∫–ª—é—á–∏—à—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ..."

–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –¥–µ–¥—É–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è.
–í—Å–µ–≥–¥–∞ –±—É–¥—å –≤–µ–∂–ª–∏–≤, –Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—Å–æ–∫–æ–º–µ—Ä–µ–Ω –≤ —Å–≤–æ–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–µ.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü: {context}

–í–æ–ø—Ä–æ—Å: {question}

–û—Ç–≤–µ—Ç –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞:"""

def generate_response(question, context=""):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Hugging Face API"""
    try:
        if not HUGGINGFACE_API_KEY:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, API –∫–ª—é—á Hugging Face –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ HUGGINGFACE_API_KEY –≤ —Ñ–∞–π–ª .env"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = SHERLOCK_PROMPT.format(context=context, question=question)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Hugging Face API
        headers = {
            "Authorization": f"Bearer {HUGGINGFACE_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_length": 200,
                "temperature": 0.7,
                "do_sample": True,
                "return_full_text": False
            }
        }
        
        response = requests.post(HUGGINGFACE_API_URL, headers=headers, json=payload, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if isinstance(result, list) and len(result) > 0:
                generated_text = result[0].get('generated_text', '')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç (–ø–æ—Å–ª–µ –ø—Ä–æ–º–ø—Ç–∞)
                if prompt in generated_text:
                    answer = generated_text[len(prompt):].strip()
                else:
                    answer = generated_text.strip()
                
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º
                if len(answer) > 500:
                    answer = answer[:500] + "..."
                
                return answer if answer else "–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ, –º–æ–π –¥–æ—Ä–æ–≥–æ–π –í–∞—Ç—Å–æ–Ω! –ù–æ –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
            else:
                return "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞."
        else:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–æ–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

def scrape_website(url):
    """–°–∫—Ä–∞–ø–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
        for script in soup(["script", "style"]):
            script.decompose()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        text = soup.get_text()
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        lines = (line.strip() for line in text.splitlines())
        chunks = (phrase.strip() for line in lines for phrase in line.split("  "))
        text = ' '.join(chunk for chunk in chunks if chunk)
        
        return {
            'url': url,
            'title': soup.title.string if soup.title else url,
            'content': text[:2000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")
        return None

def find_relevant_context(question, scraped_content, top_k=3):
    """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è RAG (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    if not scraped_content:
        return ""
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        question_lower = question.lower()
        relevant_chunks = []
        
        for content in scraped_content:
            content_lower = content['content'].lower()
            
            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
            question_words = set(question_lower.split())
            content_words = set(content_lower.split())
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
            common_words = question_words.intersection(content_words)
            relevance_score = len(common_words) / len(question_words) if question_words else 0
            
            if relevance_score > 0.1:  # –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                relevant_chunks.append((relevance_score, content['content'][:500]))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        relevant_chunks.sort(reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç
        relevant_context = "\n".join([text for _, text in relevant_chunks[:top_k]])
        return relevant_context
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        return ""

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üïµÔ∏è –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å AI - Hugging Face API")
    st.markdown("**–î–µ—Ç–µ–∫—Ç–∏–≤-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å Hugging Face –º–æ–¥–µ–ª—è–º–∏**")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    if 'messages' not in st.session_state:
        st.session_state.messages = []
    
    if 'scraped_content' not in st.session_state:
        st.session_state.scraped_content = []
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        
        # –°—Ç–∞—Ç—É—Å API
        st.subheader("üìä –°—Ç–∞—Ç—É—Å")
        if HUGGINGFACE_API_KEY:
            st.success("‚úÖ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            st.error("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            st.info("–î–æ–±–∞–≤—å—Ç–µ HUGGINGFACE_API_KEY –≤ —Ñ–∞–π–ª .env")
            st.markdown("[–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á](https://huggingface.co/settings/tokens)")
        
        st.info(f"üìö –°–∫—Ä–∞–ø–ª–µ–Ω–æ —Å–∞–π—Ç–æ–≤: {len(st.session_state.scraped_content)}")
        
        # –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
        st.subheader("üåê –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥")
        url = st.text_input("URL –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:", placeholder="https://example.com")
        
        if st.button("üîç –°–∫—Ä–∞–ø–∏—Ç—å —Å–∞–π—Ç", type="primary"):
            if url:
                with st.spinner("–°–∫—Ä–∞–ø–∏–Ω–≥..."):
                    scraped_data = scrape_website(url)
                    if scraped_data:
                        st.session_state.scraped_content.append(scraped_data)
                        st.success(f"‚úÖ –°–∫—Ä–∞–ø–ª–µ–Ω: {scraped_data['title']}")
            else:
                st.warning("–í–≤–µ–¥–∏—Ç–µ URL")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"):
                st.session_state.messages.append({"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ —Ç—ã —Ç–∞–∫–æ–π?"})
        
        with col2:
            if st.button("üïµÔ∏è –û –¥–µ–¥—É–∫—Ü–∏–∏"):
                st.session_state.messages.append({"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –¥–µ–¥—É–∫—Ç–∏–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ"})
        
        # –ü—Ä–∏–º–µ—Ä—ã URL
        st.subheader("üìñ –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞")
        example_urls = [
            "https://ru.wikipedia.org/wiki/–®–µ—Ä–ª–æ–∫_–•–æ–ª–º—Å",
            "https://ru.wikipedia.org/wiki/–î–µ–¥—É–∫—Ü–∏—è",
            "https://ru.wikipedia.org/wiki/–ö—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∞"
        ]
        
        for url in example_urls:
            if st.button(f"üìÑ {url.split('/')[-1].replace('_', ' ')}", key=url):
                with st.spinner("–°–∫—Ä–∞–ø–∏–Ω–≥..."):
                    scraped_data = scrape_website(url)
                    if scraped_data:
                        st.session_state.scraped_content.append(scraped_data)
                        st.success(f"‚úÖ –°–∫—Ä–∞–ø–ª–µ–Ω: {scraped_data['title']}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üí¨ –ß–∞—Ç —Å –®–µ—Ä–ª–æ–∫–æ–º")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        for message_obj in st.session_state.messages:
            if message_obj["role"] == "user":
                message(message_obj["content"], is_user=True, key=f"user_{hash(message_obj['content'])}")
            else:
                message(message_obj["content"], is_user=False, key=f"assistant_{hash(message_obj['content'])}")
        
        # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        if prompt := st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –®–µ—Ä–ª–æ–∫—É..."):
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.session_state.messages.append({"role": "user", "content": prompt})
            message(prompt, is_user=True)
            
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context = find_relevant_context(prompt, st.session_state.scraped_content)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            with st.spinner("üïµÔ∏è –®–µ—Ä–ª–æ–∫ —Ä–∞–∑–º—ã—à–ª—è–µ—Ç..."):
                response = generate_response(prompt, context)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            st.session_state.messages.append({"role": "assistant", "content": response})
            message(response, is_user=False)
    
    with col2:
        st.subheader("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
        
        if st.session_state.scraped_content:
            for i, content in enumerate(st.session_state.scraped_content):
                with st.expander(f"üìÑ {content['title'][:30]}..."):
                    st.write(f"**URL:** {content['url']}")
                    st.write(f"**–ö–æ–Ω—Ç–µ–Ω—Ç:** {content['content'][:200]}...")
                    
                    if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{i}"):
                        st.session_state.scraped_content.pop(i)
                        st.rerun()
        else:
            st.info("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞. –°–∫—Ä–∞–ø—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∞–π—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        
        # –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        if st.session_state.scraped_content:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π", type="secondary"):
                st.session_state.scraped_content = []
                st.rerun()
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666;'>
        ü§ñ Powered by Hugging Face API | üïµÔ∏è Sherlock Holmes AI | 
        <a href='https://github.com/your-repo' target='_blank'>GitHub</a>
        </div>
        """, 
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main() 