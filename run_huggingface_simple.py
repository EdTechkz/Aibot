#!/usr/bin/env python3
"""
ü§ñ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ AI-–±–æ—Ç–∞ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ —Å Hugging Face API
"""

import os
import sys
import subprocess
import importlib.util
from pathlib import Path

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    requirements_file = "requirements_huggingface_simple.txt"
    
    if not os.path.exists(requirements_file):
        print(f"‚ùå –§–∞–π–ª {requirements_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ß–∏—Ç–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    with open(requirements_file, 'r') as f:
        requirements = [line.strip() for line in f if line.strip() and not line.startswith('#')]
    
    missing_packages = []
    
    for req in requirements:
        package_name = req.split('>=')[0].split('==')[0]
        if importlib.util.find_spec(package_name) is None:
            missing_packages.append(req)
    
    if missing_packages:
        print(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: {len(missing_packages)}")
        try:
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", "-r", requirements_file
            ])
            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return False
    else:
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    return True

def check_api_key():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞"""
    from dotenv import load_dotenv
    load_dotenv()
    
    api_key = os.getenv('HUGGINGFACE_API_KEY', '')
    
    if not api_key:
        print("‚ö†Ô∏è  HUGGINGFACE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
        print("   –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á")
        print("   –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞: https://huggingface.co/settings/tokens")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ .env
        if not os.path.exists('.env'):
            with open('.env', 'w') as f:
                f.write("# Hugging Face API Key\n")
                f.write("# –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞: https://huggingface.co/settings/tokens\n")
                f.write("HUGGINGFACE_API_KEY=your_api_key_here\n")
            print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env —Å –ø—Ä–∏–º–µ—Ä–æ–º")
        
        return False
    else:
        print("‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
        return True

def check_streamlit():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Streamlit"""
    try:
        import streamlit
        print(f"‚úÖ Streamlit {streamlit.__version__} - OK")
        return True
    except ImportError:
        print("‚ùå Streamlit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_flask():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Flask"""
    try:
        import flask
        print(f"‚úÖ Flask {flask.__version__} - OK")
        return True
    except ImportError:
        print("‚ùå Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Hugging Face API"""
    print("\nüåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Hugging Face API:")
    print("   - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("   - –õ–∏–º–∏—Ç: 30,000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü")
    print("   - –ú–æ–¥–µ–ª—å: microsoft/DialoGPT-medium")
    print("   - –°–∫–æ—Ä–æ—Å—Ç—å: –ë—ã—Å—Ç—Ä–∞—è (—á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)")
    print("   - –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

def run_streamlit():
    """–ó–∞–ø—É—Å–∫ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Streamlit
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", 
            "streamlit_app_huggingface_simple.py",
            "--server.port", "8501",
            "--server.address", "localhost"
        ])
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
        subprocess.run([
            sys.executable, "app_huggingface_simple.py"
        ])
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üïµÔ∏è AI-–±–æ—Ç –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ - Hugging Face API –≤–µ—Ä—Å–∏—è")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not check_python_version():
        return
    
    if not check_dependencies():
        return
    
    if not check_streamlit():
        return
    
    if not check_flask():
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    api_configured = check_api_key()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API
    api_info()
    
    # –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    print("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
    print("1. Streamlit (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("2. Flask - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    
    if not api_configured:
        print("\n‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ë–µ–∑ API –∫–ª—é—á–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
    
    while True:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
        
        if choice == "1":
            run_streamlit()
            break
        elif choice == "2":
            run_flask()
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")

if __name__ == "__main__":
    main() 