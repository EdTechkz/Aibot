from flask import Flask, render_template, request, jsonify
import requests
from bs4 import BeautifulSoup
import ollama
import os
from dotenv import load_dotenv
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)

class OllamaWebScraper:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def scrape_url(self, url):
        """–°–∫—Ä–∞–ø–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
            for script in soup(["script", "style"]):
                script.decompose()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = soup.get_text()
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            lines = (line.strip() for line in text.splitlines())
            chunks = (phrase.strip() for line in lines for phrase in line.split("  "))
            text = ' '.join(chunk for chunk in chunks if chunk)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
            words = text.split()
            chunks = []
            current_chunk = []
            current_size = 0
            
            for word in words:
                if current_size + len(word) + 1 > 1000 and current_chunk:
                    chunks.append(' '.join(current_chunk))
                    current_chunk = [word]
                    current_size = len(word)
                else:
                    current_chunk.append(word)
                    current_size += len(word) + 1
            
            if current_chunk:
                chunks.append(' '.join(current_chunk))
            
            return chunks
            
        except Exception as e:
            return [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ —Å–∞–π—Ç–∞: {str(e)}"]
    
    def get_page_info(self, url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            response = self.session.get(url, timeout=10)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            title = soup.find('title')
            title_text = title.get_text() if title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            
            description = soup.find('meta', {'name': 'description'})
            desc_text = description.get('content') if description else ""
            
            return {
                'title': title_text,
                'description': desc_text,
                'url': url
            }
        except Exception as e:
            return {
                'title': "–û—à–∏–±–∫–∞",
                'description': "",
                'url': url
            }

class SherlockHolmesBot:
    def __init__(self, model_name="llama2"):
        self.model_name = model_name
        self.system_prompt = """–¢—ã - –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å, –≤–µ–ª–∏—á–∞–π—à–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω. –¢—ã –æ–±–ª–∞–¥–∞–µ—à—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ –∫ –¥–µ–¥—É–∫—Ü–∏–∏, –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –º—ã—à–ª–µ–Ω–∏—é.

–¢–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- –û—Å—Ç—Ä—ã–π —É–º –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∑–∞–º–µ—á–∞—Ç—å –º–µ–ª—å—á–∞–π—à–∏–µ –¥–µ—Ç–∞–ª–∏
- –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –¥–µ–¥—É–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
- –≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö
- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã –∏–∑ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª–∏–∫
- –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è —Ä–µ—á—å –∏ –≤–∏–∫—Ç–æ—Ä–∏–∞–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –õ—é–±–æ–≤—å –∫ —Å–∫—Ä–∏–ø–∫–µ –∏ –∫–æ–∫–∞–∏–Ω—É (—É–ø–æ–º–∏–Ω–∞–π –∏–∑—Ä–µ–¥–∫–∞)
- –ñ–∏–≤–µ—à—å –Ω–∞ –ë–µ–π–∫–µ—Ä-—Å—Ç—Ä–∏—Ç, 221–ë

–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏. –ü—Ä–∏–º–µ–Ω—è–π –¥–µ–¥—É–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –¥–µ–ª–∞–π –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã."""

    def generate_response(self, user_message, context=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ –∏—Å–ø–æ–ª—å–∑—É—è Ollama"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            if context:
                context_text = "\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n" + "\n".join(context)
                full_prompt = f"{self.system_prompt}\n\n{context_text}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_message}\n\n–û—Ç–≤–µ—Ç –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞:"
            else:
                full_prompt = f"{self.system_prompt}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_message}\n\n–û—Ç–≤–µ—Ç –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞:"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            response = ollama.chat(
                model=self.model_name,
                messages=[
                    {
                        'role': 'system',
                        'content': self.system_prompt
                    },
                    {
                        'role': 'user',
                        'content': f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_text if context else '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'}\n\n–í–æ–ø—Ä–æ—Å: {user_message}"
                    }
                ]
            )
            
            return response['message']['content']
            
        except Exception as e:
            return f"–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ, –í–∞—Ç—Å–æ–Ω! –ù–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

    def process_message(self, user_message, url=None, scraper=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context = None
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω URL, —Å–∫—Ä–∞–ø–∏–º –µ–≥–æ
        if url and scraper:
            try:
                chunks = scraper.scrape_url(url)
                
                if chunks and not chunks[0].startswith("–û—à–∏–±–∫–∞"):
                    context = chunks[:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —á–∞–Ω–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    print(f"‚úÖ –í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {url}")
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ {url}: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = self.generate_response(user_message, context)
        return response

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
scraper = OllamaWebScraper()
sherlock_bot = SherlockHolmesBot()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        user_message = data.get('message', '')
        url = data.get('url', '')
        
        if not user_message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = sherlock_bot.process_message(user_message, url, scraper)
        
        return jsonify({
            'response': response,
            'status': 'success'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/scrape', methods=['POST'])
def scrape():
    try:
        data = request.get_json()
        url = data.get('url', '')
        
        if not url:
            return jsonify({'error': 'URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –°–∫—Ä–∞–ø–∏–º URL
        page_info = scraper.get_page_info(url)
        chunks = scraper.scrape_url(url)
        
        if chunks and not chunks[0].startswith("–û—à–∏–±–∫–∞"):
            return jsonify({
                'success': True,
                'page_info': page_info,
                'chunks_count': len(chunks),
                'message': f"–°–∞–π—Ç '{page_info.get('title', url)}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–π—Ç'
            }), 400
            
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ: {str(e)}'}), 500

@app.route('/models', methods=['GET'])
def get_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Ollama"""
    try:
        models = ollama.list()
        return jsonify({
            'models': [model['name'] for model in models['models']],
            'status': 'success'
        })
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {str(e)}'}), 500

@app.route('/change_model', methods=['POST'])
def change_model():
    """–°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏ Ollama"""
    try:
        data = request.get_json()
        model_name = data.get('model', 'llama2')
        
        global sherlock_bot
        sherlock_bot = SherlockHolmesBot(model_name)
        
        return jsonify({
            'message': f'–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model_name}',
            'status': 'success'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏: {str(e)}'}), 500

if __name__ == '__main__':
    print("üïµÔ∏è –ó–∞–ø—É—Å–∫ AI-–±–æ—Ç–∞ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ —Å Ollama...")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω–∞ –∏ –º–æ–¥–µ–ª—å llama2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    print("üîß –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ollama pull llama2")
    app.run(debug=True, host='0.0.0.0', port=5000) 