"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-–±–æ—Ç–∞ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞
"""

from app import sherlock_bot
from scraper import WebScraper
import time

def example_basic_chat():
    """–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    print("=== –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ —á–∞—Ç–∞ ===")
    
    questions = [
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ –¥–µ–¥—É–∫—Ç–∏–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ",
        "–ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –¥–æ–∫—Ç–æ—Ä—É –í–∞—Ç—Å–æ–Ω—É?",
        "–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?",
        "–ì–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?"
    ]
    
    for question in questions:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {question}")
        response = sherlock_bot.process_message(question)
        print(f"üïµÔ∏è  –®–µ—Ä–ª–æ–∫: {response}")
        time.sleep(1)

def example_wikipedia_scraping():
    """–ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ Wikipedia"""
    print("\n=== –ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ Wikipedia ===")
    
    urls = [
        "https://ru.wikipedia.org/wiki/–®–µ—Ä–ª–æ–∫_–•–æ–ª–º—Å",
        "https://ru.wikipedia.org/wiki/–î–µ–¥—É–∫—Ü–∏—è",
        "https://ru.wikipedia.org/wiki/–ö–æ–Ω–∞–Ω_–î–æ–π–ª"
    ]
    
    scraper = WebScraper()
    
    for url in urls:
        print(f"\nüåê –°–∫—Ä–∞–ø–∏–Ω–≥: {url}")
        try:
            chunks = scraper.scrape_url(url)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            sherlock_bot.store_in_vector_db(chunks, url)
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        time.sleep(2)

def example_rag_analysis():
    """–ü—Ä–∏–º–µ—Ä RAG –∞–Ω–∞–ª–∏–∑–∞"""
    print("\n=== –ü—Ä–∏–º–µ—Ä RAG –∞–Ω–∞–ª–∏–∑–∞ ===")
    
    questions = [
        "–ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –æ –®–µ—Ä–ª–æ–∫–µ –•–æ–ª–º—Å–µ?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ –¥–µ–¥—É–∫—Ç–∏–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ",
        "–ö—Ç–æ —Ç–∞–∫–æ–π –ö–æ–Ω–∞–Ω –î–æ–π–ª?",
        "–ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å?"
    ]
    
    for question in questions:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {question}")
        response = sherlock_bot.process_message(question)
        print(f"üïµÔ∏è  –®–µ—Ä–ª–æ–∫: {response}")
        time.sleep(1)

def example_case_solving():
    """–ü—Ä–∏–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è –¥–µ–ª–∞"""
    print("\n=== –ü—Ä–∏–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è –¥–µ–ª–∞ ===")
    
    case = """
    –î–µ–ª–æ: –ü—Ä–æ–ø–∞–∂–∞ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ–≥–æ –∫–æ–ª—å—Ü–∞
    
    –§–∞–∫—Ç—ã:
    - –ö–æ–ª—å—Ü–æ –ø—Ä–æ–ø–∞–ª–æ –∏–∑ —Å–ø–∞–ª—å–Ω–∏ –º–∏—Å—Å–∏—Å –•–∞–¥—Å–æ–Ω
    - –î–≤–µ—Ä—å –±—ã–ª–∞ –∑–∞–ø–µ—Ä—Ç–∞ –∏–∑–Ω—É—Ç—Ä–∏
    - –û–∫–Ω–æ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ
    - –ù–∞ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—ã –≥—Ä—è–∑–∏
    - –í –¥–æ–º–µ –±—ã–ª —Ç–æ–ª—å–∫–æ –º–∏—Å—Å–∏—Å –•–∞–¥—Å–æ–Ω –∏ –µ—ë –∫–æ—Ç
    - –ö–æ–ª—å—Ü–æ –±—ã–ª–æ –Ω–∞–¥–µ—Ç–æ –Ω–∞ –ø–∞–ª–µ—Ü —É—Ç—Ä–æ–º
    - –í–µ—á–µ—Ä–æ–º –∫–æ–ª—å—Ü–æ –∏—Å—á–µ–∑–ª–æ
    """
    
    print(f"üìã {case}")
    
    questions = [
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –¥–µ–ª–æ",
        "–ö—Ç–æ –º–æ–≥ —É–∫—Ä–∞—Å—Ç—å –∫–æ–ª—å—Ü–æ?",
        "–ö–∞–∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫ –ø—Ä–æ–Ω–∏–∫ –≤ –∫–æ–º–Ω–∞—Ç—É?",
        "–ö–∞–∫–∏–µ —É–ª–∏–∫–∏ —Ç—ã –≤–∏–¥–∏—à—å?",
        "–ö–∞–∫–æ–π —Ç–≤–æ–π –≤–µ—Ä–¥–∏–∫—Ç?"
    ]
    
    for question in questions:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {question}")
        response = sherlock_bot.process_message(question)
        print(f"üïµÔ∏è  –®–µ—Ä–ª–æ–∫: {response}")
        time.sleep(1)

def example_website_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-—Å–∞–π—Ç–∞"""
    print("\n=== –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-—Å–∞–π—Ç–∞ ===")
    
    # –°–∫—Ä–∞–ø–∏–º —Å–∞–π—Ç –æ –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–µ
    url = "https://ru.wikipedia.org/wiki/–ö—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∞"
    
    print(f"üåê –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–π—Ç: {url}")
    
    try:
        # –°–∫—Ä–∞–ø–∏–º —Å–∞–π—Ç
        scraper = WebScraper()
        chunks = scraper.scrape_url(url)
        
        if chunks and not chunks[0].startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
            sherlock_bot.store_in_vector_db(chunks, url)
            print(f"‚úÖ –°–∞–π—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
            
            # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∞–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            questions = [
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∞?",
                "–ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–µ?",
                "–ö–∞–∫ –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥–µ–¥—É–∫—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º?",
                "–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç—ã?"
            ]
            
            for question in questions:
                print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {question}")
                response = sherlock_bot.process_message(question)
                print(f"üïµÔ∏è  –®–µ—Ä–ª–æ–∫: {response}")
                time.sleep(1)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–π—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def run_all_examples():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("üïµÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π AI-–±–æ—Ç–∞ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞")
    print("=" * 60)
    
    try:
        example_basic_chat()
        example_wikipedia_scraping()
        example_rag_analysis()
        example_case_solving()
        example_website_analysis()
        
        print("\n" + "=" * 60)
        print("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")

if __name__ == "__main__":
    run_all_examples() 