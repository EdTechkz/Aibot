#!/usr/bin/env python3
"""
ü§ñ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ AI-–±–æ—Ç–∞ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ —Å Hugging Face –º–æ–¥–µ–ª—è–º–∏
"""

import os
import sys
import subprocess
import importlib.util
from pathlib import Path

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    requirements_file = "requirements_huggingface.txt"
    
    if not os.path.exists(requirements_file):
        print(f"‚ùå –§–∞–π–ª {requirements_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ß–∏—Ç–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    with open(requirements_file, 'r') as f:
        requirements = [line.strip() for line in f if line.strip() and not line.startswith('#')]
    
    missing_packages = []
    
    for req in requirements:
        package_name = req.split('>=')[0].split('==')[0]
        if importlib.util.find_spec(package_name) is None:
            missing_packages.append(req)
    
    if missing_packages:
        print(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: {len(missing_packages)}")
        try:
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", "-r", requirements_file
            ])
            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return False
    else:
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    return True

def check_torch():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ PyTorch –∏ CUDA"""
    try:
        import torch
        print(f"‚úÖ PyTorch {torch.__version__} - OK")
        
        if torch.cuda.is_available():
            print(f"üöÄ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.get_device_name(0)}")
            print(f"   –ü–∞–º—è—Ç—å GPU: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
        else:
            print("üíª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU")
        
        return True
    except ImportError:
        print("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_transformers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Transformers"""
    try:
        import transformers
        print(f"‚úÖ Transformers {transformers.__version__} - OK")
        return True
    except ImportError:
        print("‚ùå Transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_streamlit():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Streamlit"""
    try:
        import streamlit
        print(f"‚úÖ Streamlit {streamlit.__version__} - OK")
        return True
    except ImportError:
        print("‚ùå Streamlit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def download_model_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏"""
    print("\nüì• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏:")
    print("   - –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–π–º–µ—Ç 5-10 –º–∏–Ω—É—Ç")
    print("   - –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("   - –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: ~1.5 GB")
    print("   - –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    print("   - –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")

def run_streamlit():
    """–ó–∞–ø—É—Å–∫ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Streamlit
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", 
            "streamlit_app_huggingface.py",
            "--server.port", "8501",
            "--server.address", "localhost"
        ])
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
        subprocess.run([
            sys.executable, "app_huggingface.py"
        ])
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üïµÔ∏è AI-–±–æ—Ç –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ - Hugging Face –≤–µ—Ä—Å–∏—è")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not check_python_version():
        return
    
    if not check_dependencies():
        return
    
    if not check_torch():
        return
    
    if not check_transformers():
        return
    
    if not check_streamlit():
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
    download_model_info()
    
    # –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    print("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
    print("1. Streamlit (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("2. Flask - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    
    while True:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
        
        if choice == "1":
            run_streamlit()
            break
        elif choice == "2":
            run_flask()
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")

if __name__ == "__main__":
    main() 