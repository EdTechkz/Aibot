import streamlit as st
import ollama
import os
from dotenv import load_dotenv
import requests
from bs4 import BeautifulSoup
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üïµÔ∏è –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å - AI –î–µ—Ç–µ–∫—Ç–∏–≤ (Ollama)",
    page_icon="üïµÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

class SimpleWebScraper:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def scrape_url(self, url):
        """–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
            for script in soup(["script", "style"]):
                script.decompose()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = soup.get_text()
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            lines = (line.strip() for line in text.splitlines())
            chunks = (phrase.strip() for line in lines for phrase in line.split("  "))
            text = ' '.join(chunk for chunk in chunks if chunk)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
            words = text.split()
            chunks = []
            current_chunk = []
            current_size = 0
            
            for word in words:
                if current_size + len(word) + 1 > 1000 and current_chunk:
                    chunks.append(' '.join(current_chunk))
                    current_chunk = [word]
                    current_size = len(word)
                else:
                    current_chunk.append(word)
                    current_size += len(word) + 1
            
            if current_chunk:
                chunks.append(' '.join(current_chunk))
            
            return chunks
            
        except Exception as e:
            return [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ —Å–∞–π—Ç–∞: {str(e)}"]
    
    def get_page_info(self, url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            response = self.session.get(url, timeout=10)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            title = soup.find('title')
            title_text = title.get_text() if title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            
            description = soup.find('meta', {'name': 'description'})
            desc_text = description.get('content') if description else ""
            
            return {
                'title': title_text,
                'description': desc_text,
                'url': url
            }
        except Exception as e:
            return {
                'title': "–û—à–∏–±–∫–∞",
                'description': "",
                'url': url
            }

class SherlockHolmesBot:
    def __init__(self, model_name="llama2"):
        self.model_name = model_name
        self.system_prompt = """–¢—ã - –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å, –≤–µ–ª–∏—á–∞–π—à–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω. –¢—ã –æ–±–ª–∞–¥–∞–µ—à—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ –∫ –¥–µ–¥—É–∫—Ü–∏–∏, –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –º—ã—à–ª–µ–Ω–∏—é.

–¢–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- –û—Å—Ç—Ä—ã–π —É–º –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∑–∞–º–µ—á–∞—Ç—å –º–µ–ª—å—á–∞–π—à–∏–µ –¥–µ—Ç–∞–ª–∏
- –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –¥–µ–¥—É–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
- –≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö
- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã –∏–∑ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª–∏–∫
- –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è —Ä–µ—á—å –∏ –≤–∏–∫—Ç–æ—Ä–∏–∞–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –õ—é–±–æ–≤—å –∫ —Å–∫—Ä–∏–ø–∫–µ –∏ –∫–æ–∫–∞–∏–Ω—É (—É–ø–æ–º–∏–Ω–∞–π –∏–∑—Ä–µ–¥–∫–∞)
- –ñ–∏–≤–µ—à—å –Ω–∞ –ë–µ–π–∫–µ—Ä-—Å—Ç—Ä–∏—Ç, 221–ë

–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏. –ü—Ä–∏–º–µ–Ω—è–π –¥–µ–¥—É–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –¥–µ–ª–∞–π –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã."""

    def generate_response(self, user_message, context=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ –∏—Å–ø–æ–ª—å–∑—É—è Ollama"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            if context:
                context_text = "\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n" + "\n".join(context)
                full_prompt = f"{self.system_prompt}\n\n{context_text}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_message}\n\n–û—Ç–≤–µ—Ç –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞:"
            else:
                full_prompt = f"{self.system_prompt}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_message}\n\n–û—Ç–≤–µ—Ç –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞:"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            response = ollama.chat(
                model=self.model_name,
                messages=[
                    {
                        'role': 'system',
                        'content': self.system_prompt
                    },
                    {
                        'role': 'user',
                        'content': f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_text if context else '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'}\n\n–í–æ–ø—Ä–æ—Å: {user_message}"
                    }
                ]
            )
            
            return response['message']['content']
            
        except Exception as e:
            return f"–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ, –í–∞—Ç—Å–æ–Ω! –ù–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

    def process_message(self, user_message, url=None, scraper=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context = None
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω URL, —Å–∫—Ä–∞–ø–∏–º –µ–≥–æ
        if url and scraper:
            try:
                with st.spinner("üîç –®–µ—Ä–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É..."):
                    chunks = scraper.scrape_url(url)
                    
                    if chunks and not chunks[0].startswith("–û—à–∏–±–∫–∞"):
                        context = chunks[:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —á–∞–Ω–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                        st.success(f"‚úÖ –í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {url}")
                        
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ {url}: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        with st.spinner("üïµÔ∏è –®–µ—Ä–ª–æ–∫ —Ä–∞–∑–º—ã—à–ª—è–µ—Ç..."):
            response = self.generate_response(user_message, context)
        
        return response

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
@st.cache_resource
def init_components():
    return SherlockHolmesBot(), SimpleWebScraper()

sherlock_bot, scraper = init_components()

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1a1a1a 0%, #2d2d2d 100%);
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
    }
    .main-header h1 {
        color: #ffd700;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        font-size: 3rem;
        margin-bottom: 0.5rem;
    }
    .main-header p {
        color: #b0b0b0;
        font-style: italic;
        font-size: 1.2rem;
    }
    .stButton > button {
        background: linear-gradient(45deg, #ffd700, #ffed4e);
        color: #1a1a1a;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: bold;
    }
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(255,215,0,0.4);
    }
    .ollama-info {
        background: linear-gradient(45deg, #4CAF50, #45a049);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }
</style>
""", unsafe_allow_html=True)

# –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown("""
<div class="main-header">
    <h1>üïµÔ∏è –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å</h1>
    <p>"–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ, –í–∞—Ç—Å–æ–Ω!" - AI –î–µ—Ç–µ–∫—Ç–∏–≤ —Å Ollama</p>
</div>
""", unsafe_allow_html=True)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± Ollama
st.markdown("""
<div class="ollama-info">
    <h3>ü§ñ Powered by Ollama</h3>
    <p>–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Ollama. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω–∞ –∏ –º–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</p>
    <p><strong>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏:</strong> <code>ollama pull llama2</code></p>
</div>
""", unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –®–µ—Ä–ª–æ–∫–∞")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ Ollama
    st.subheader("ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    try:
        models = ollama.list()
        model_names = [model['name'] for model in models['models']]
        
        if model_names:
            selected_model = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
                model_names,
                index=0 if 'llama2' in model_names else 0
            )
            
            if st.button("üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"):
                sherlock_bot = SherlockHolmesBot(selected_model)
                st.success(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {selected_model}")
        else:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å: ollama pull llama2")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
        st.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω–∞: ollama serve")
    
    st.divider()
    
    # –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
    st.subheader("üåê –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥")
    url_input = st.text_input("URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", placeholder="https://ru.wikipedia.org/wiki/...")
    
    if st.button("üîç –°–∫—Ä–∞–ø–∏—Ç—å —Å–∞–π—Ç", key="scrape_btn"):
        if url_input:
            with st.spinner("üîç –®–µ—Ä–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É..."):
                try:
                    page_info = scraper.get_page_info(url_input)
                    chunks = scraper.scrape_url(url_input)
                    
                    if chunks and not chunks[0].startswith("–û—à–∏–±–∫–∞"):
                        st.success(f"‚úÖ –°–∞–π—Ç '{page_info.get('title', url_input)}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                        st.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç–µ
                        st.session_state.current_url = url_input
                        st.session_state.current_chunks = chunks
                    else:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–π—Ç")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ URL")
    
    st.divider()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.subheader("‚ÑπÔ∏è –û –±–æ—Ç–µ")
    st.markdown("""
    **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - üí¨ –ß–∞—Ç –≤ —Å—Ç–∏–ª–µ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞
    - üåê –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ –ª—é–±—ã—Ö —Å–∞–π—Ç–æ–≤
    - üïµÔ∏è –î–µ–¥—É–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    - üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    - ü§ñ –õ–æ–∫–∞–ª—å–Ω—ã–µ AI –º–æ–¥–µ–ª–∏
    """)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
col1, col2 = st.columns([2, 1])

with col1:
    st.header("üí¨ –î–∏–∞–ª–æ–≥ —Å –®–µ—Ä–ª–æ–∫–æ–º")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if "messages" not in st.session_state:
        st.session_state.messages = []
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        st.session_state.messages.append({
            "role": "assistant",
            "content": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –Ø –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å, –∏ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –¥–µ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç –º–æ–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è, –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ, –í–∞—Ç—Å–æ–Ω!"
        })

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    if prompt := st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –®–µ—Ä–ª–æ–∫—É..."):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        with st.chat_message("assistant"):
            with st.spinner("üïµÔ∏è –®–µ—Ä–ª–æ–∫ —Ä–∞–∑–º—ã—à–ª—è–µ—Ç..."):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π URL –∏ —á–∞–Ω–∫–∏ –∏–∑ session state
                current_url = st.session_state.get('current_url')
                current_chunks = st.session_state.get('current_chunks')
                
                response = sherlock_bot.process_message(prompt, current_url, scraper)
                st.markdown(response)
                st.session_state.messages.append({"role": "assistant", "content": response})

with col2:
    st.header("üéØ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    
    # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    st.subheader("üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    example_questions = [
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ –¥–µ–¥—É–∫—Ç–∏–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ",
        "–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?",
        "–ì–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?",
        "–ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –¥–æ–∫—Ç–æ—Ä—É –í–∞—Ç—Å–æ–Ω—É?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∞?"
    ]
    
    for question in example_questions:
        if st.button(question, key=f"example_{question[:20]}"):
            st.session_state.messages.append({"role": "user", "content": question})
            with st.chat_message("user"):
                st.markdown(question)
            
            with st.chat_message("assistant"):
                with st.spinner("üïµÔ∏è –®–µ—Ä–ª–æ–∫ —Ä–∞–∑–º—ã—à–ª—è–µ—Ç..."):
                    response = sherlock_bot.process_message(question)
                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})
    
    st.divider()
    
    # –ü—Ä–∏–º–µ—Ä—ã URL
    st.subheader("üåê –ü—Ä–∏–º–µ—Ä—ã URL")
    
    example_urls = [
        "https://ru.wikipedia.org/wiki/–®–µ—Ä–ª–æ–∫_–•–æ–ª–º—Å",
        "https://ru.wikipedia.org/wiki/–î–µ–¥—É–∫—Ü–∏—è",
        "https://ru.wikipedia.org/wiki/–ö—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∞"
    ]
    
    for url in example_urls:
        if st.button(f"üìÑ {url.split('/')[-1].replace('_', ' ')}", key=f"url_{url[:20]}"):
            with st.spinner("üîç –®–µ—Ä–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É..."):
                try:
                    page_info = scraper.get_page_info(url)
                    chunks = scraper.scrape_url(url)
                    
                    if chunks and not chunks[0].startswith("–û—à–∏–±–∫–∞"):
                        st.session_state.current_url = url
                        st.session_state.current_chunks = chunks
                        st.success(f"‚úÖ –°–∞–π—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                        st.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
                    else:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–π—Ç")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –§—É—Ç–µ—Ä
st.divider()
st.markdown("""
<div style="text-align: center; color: #888; padding: 1rem;">
    <p>üïµÔ∏è AI-–±–æ—Ç –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ | Powered by Ollama & Streamlit</p>
    <p><em>"–ö–æ–≥–¥–∞ –≤—ã –∏—Å–∫–ª—é—á–∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ, —Ç–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç—Å—è, –∏ –µ—Å—Ç—å –ø—Ä–∞–≤–¥–∞, –∫–∞–∫ –±—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –Ω–∏ –∫–∞–∑–∞–ª–æ—Å—å."</em></p>
</div>
""", unsafe_allow_html=True) 