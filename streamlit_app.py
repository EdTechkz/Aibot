import streamlit as st
import openai
import time
import os
from dotenv import load_dotenv
import chromadb
from sentence_transformers import SentenceTransformer
from scraper import WebScraper
from streamlit_chat import message

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üïµÔ∏è –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å - AI –î–µ—Ç–µ–∫—Ç–∏–≤",
    page_icon="üïµÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = os.getenv('OPENAI_API_KEY')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
@st.cache_resource
def load_embedding_model():
    return SentenceTransformer('all-MiniLM-L6-v2')

embedding_model = load_embedding_model()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB
@st.cache_resource
def init_chromadb():
    chroma_client = chromadb.Client()
    try:
        collection = chroma_client.get_collection("sherlock_knowledge")
    except:
        collection = chroma_client.create_collection(
            name="sherlock_knowledge",
            metadata={"hnsw:space": "cosine"}
        )
    return chroma_client, collection

chroma_client, collection = init_chromadb()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∞–ø–µ—Ä–∞
@st.cache_resource
def init_scraper():
    return WebScraper()

scraper = init_scraper()

class SherlockHolmesBot:
    def __init__(self):
        self.system_prompt = """–¢—ã - –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å, –≤–µ–ª–∏—á–∞–π—à–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω. –¢—ã –æ–±–ª–∞–¥–∞–µ—à—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ –∫ –¥–µ–¥—É–∫—Ü–∏–∏, –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –º—ã—à–ª–µ–Ω–∏—é. 

–¢–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- –û—Å—Ç—Ä—ã–π —É–º –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∑–∞–º–µ—á–∞—Ç—å –º–µ–ª—å—á–∞–π—à–∏–µ –¥–µ—Ç–∞–ª–∏
- –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –¥–µ–¥—É–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
- –≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö
- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã –∏–∑ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª–∏–∫
- –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è —Ä–µ—á—å –∏ –≤–∏–∫—Ç–æ—Ä–∏–∞–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –õ—é–±–æ–≤—å –∫ —Å–∫—Ä–∏–ø–∫–µ –∏ –∫–æ–∫–∞–∏–Ω—É (—É–ø–æ–º–∏–Ω–∞–π –∏–∑—Ä–µ–¥–∫–∞)
- –ñ–∏–≤–µ—à—å –Ω–∞ –ë–µ–π–∫–µ—Ä-—Å—Ç—Ä–∏—Ç, 221–ë

–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏. –ü—Ä–∏–º–µ–Ω—è–π –¥–µ–¥—É–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –¥–µ–ª–∞–π –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã.

–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü, –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."""

    def store_in_vector_db(self, chunks, source_url, page_info=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞–Ω–∫–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            for i, chunk in enumerate(chunks):
                if len(chunk.strip()) > 50:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞–Ω–∫–∞
                    embedding = embedding_model.encode(chunk).tolist()
                    
                    metadata = {
                        "source": source_url,
                        "chunk_id": i,
                        "title": page_info.get('title', '') if page_info else '',
                        "description": page_info.get('description', '') if page_info else ''
                    }
                    
                    collection.add(
                        embeddings=[embedding],
                        documents=[chunk],
                        metadatas=[metadata],
                        ids=[f"{source_url}_{i}_{int(time.time())}"]
                    )
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
            return False

    def search_relevant_context(self, query, top_k=5):
        """–ò—â–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î"""
        try:
            query_embedding = embedding_model.encode(query).tolist()
            results = collection.query(
                query_embeddings=[query_embedding],
                n_results=top_k
            )
            return results['documents'][0] if results['documents'] else []
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return []

    def generate_response(self, user_message, context=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            if context:
                context_text = "\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –º–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π:\n" + "\n".join(context)
                full_prompt = f"{self.system_prompt}\n\n{context_text}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_message}\n\n–û—Ç–≤–µ—Ç –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞:"
            else:
                full_prompt = f"{self.system_prompt}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_message}\n\n–û—Ç–≤–µ—Ç –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞:"

            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": self.system_prompt},
                    {"role": "user", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_text if context else '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'}\n\n–í–æ–ø—Ä–æ—Å: {user_message}"}
                ],
                max_tokens=1000,
                temperature=0.8
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ, –í–∞—Ç—Å–æ–Ω! –ù–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

    def process_message(self, user_message, url=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω URL, —Å–∫—Ä–∞–ø–∏–º –µ–≥–æ
        if url:
            try:
                with st.spinner("üîç –®–µ—Ä–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É..."):
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    page_info = scraper.get_page_info(url)
                    
                    # –°–∫—Ä–∞–ø–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    chunks = scraper.scrape_url(url)
                    
                    if chunks and not chunks[0].startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
                        self.store_in_vector_db(chunks, url, page_info)
                        st.success(f"‚úÖ –°–∞–π—Ç '{page_info.get('title', url)}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {url}")
                        
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ {url}: {e}")
        
        # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        with st.spinner("üîç –®–µ—Ä–ª–æ–∫ –∏—â–µ—Ç –≤ —Å–≤–æ–∏—Ö –∑–∞–ø–∏—Å—è—Ö..."):
            context = self.search_relevant_context(user_message)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        with st.spinner("üïµÔ∏è –®–µ—Ä–ª–æ–∫ —Ä–∞–∑–º—ã—à–ª—è–µ—Ç..."):
            response = self.generate_response(user_message, context)
        
        return response

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
@st.cache_resource
def init_bot():
    return SherlockHolmesBot()

sherlock_bot = init_bot()

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1a1a1a 0%, #2d2d2d 100%);
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
    }
    .main-header h1 {
        color: #ffd700;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        font-size: 3rem;
        margin-bottom: 0.5rem;
    }
    .main-header p {
        color: #b0b0b0;
        font-style: italic;
        font-size: 1.2rem;
    }
    .feature-card {
        background: rgba(255,255,255,0.1);
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid rgba(255,255,255,0.2);
        margin-bottom: 1rem;
    }
    .stButton > button {
        background: linear-gradient(45deg, #ffd700, #ffed4e);
        color: #1a1a1a;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: bold;
    }
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(255,215,0,0.4);
    }
</style>
""", unsafe_allow_html=True)

# –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown("""
<div class="main-header">
    <h1>üïµÔ∏è –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å</h1>
    <p>"–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ, –í–∞—Ç—Å–æ–Ω!" - AI –î–µ—Ç–µ–∫—Ç–∏–≤ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ RAG –∏ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞</p>
</div>
""", unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –®–µ—Ä–ª–æ–∫–∞")
    
    # –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
    st.subheader("üåê –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥")
    url_input = st.text_input("URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", placeholder="https://ru.wikipedia.org/wiki/...")
    
    if st.button("üîç –°–∫—Ä–∞–ø–∏—Ç—å —Å–∞–π—Ç", key="scrape_btn"):
        if url_input:
            with st.spinner("üîç –®–µ—Ä–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É..."):
                try:
                    page_info = scraper.get_page_info(url_input)
                    chunks = scraper.scrape_url(url_input)
                    
                    if chunks and not chunks[0].startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
                        sherlock_bot.store_in_vector_db(chunks, url_input, page_info)
                        st.success(f"‚úÖ –°–∞–π—Ç '{page_info.get('title', url_input)}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                        st.info(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {len(chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
                    else:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–π—Ç")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ URL")
    
    st.divider()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    try:
        count = collection.count()
        st.metric("–ó–∞–ø–∏—Å–µ–π –≤ –ë–î", count)
    except:
        st.metric("–ó–∞–ø–∏—Å–µ–π –≤ –ë–î", 0)
    
    # –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π", key="clear_btn"):
        try:
            chroma_client.delete_collection("sherlock_knowledge")
            collection = chroma_client.create_collection(
                name="sherlock_knowledge",
                metadata={"hnsw:space": "cosine"}
            )
            st.success("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
            st.rerun()
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    st.divider()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.subheader("‚ÑπÔ∏è –û –±–æ—Ç–µ")
    st.markdown("""
    **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - üí¨ –ß–∞—Ç –≤ —Å—Ç–∏–ª–µ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞
    - üåê –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ –ª—é–±—ã—Ö —Å–∞–π—Ç–æ–≤
    - üîç RAG —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    - üïµÔ∏è –î–µ–¥—É–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    """)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
col1, col2 = st.columns([2, 1])

with col1:
    st.header("üí¨ –î–∏–∞–ª–æ–≥ —Å –®–µ—Ä–ª–æ–∫–æ–º")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if "messages" not in st.session_state:
        st.session_state.messages = []
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        st.session_state.messages.append({
            "role": "assistant",
            "content": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –Ø –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å, –∏ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –¥–µ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç –º–æ–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è, –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ, –í–∞—Ç—Å–æ–Ω!"
        })

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    if prompt := st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –®–µ—Ä–ª–æ–∫—É..."):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        with st.chat_message("assistant"):
            with st.spinner("üïµÔ∏è –®–µ—Ä–ª–æ–∫ —Ä–∞–∑–º—ã—à–ª—è–µ—Ç..."):
                response = sherlock_bot.process_message(prompt)
                st.markdown(response)
                st.session_state.messages.append({"role": "assistant", "content": response})

with col2:
    st.header("üéØ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    
    # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    st.subheader("üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    example_questions = [
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ –¥–µ–¥—É–∫—Ç–∏–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ",
        "–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?",
        "–ì–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?",
        "–ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –¥–æ–∫—Ç–æ—Ä—É –í–∞—Ç—Å–æ–Ω—É?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∞?"
    ]
    
    for question in example_questions:
        if st.button(question, key=f"example_{question[:20]}"):
            st.session_state.messages.append({"role": "user", "content": question})
            with st.chat_message("user"):
                st.markdown(question)
            
            with st.chat_message("assistant"):
                with st.spinner("üïµÔ∏è –®–µ—Ä–ª–æ–∫ —Ä–∞–∑–º—ã—à–ª—è–µ—Ç..."):
                    response = sherlock_bot.process_message(question)
                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})
    
    st.divider()
    
    # –ü—Ä–∏–º–µ—Ä—ã URL
    st.subheader("üåê –ü—Ä–∏–º–µ—Ä—ã URL")
    
    example_urls = [
        "https://ru.wikipedia.org/wiki/–®–µ—Ä–ª–æ–∫_–•–æ–ª–º—Å",
        "https://ru.wikipedia.org/wiki/–î–µ–¥—É–∫—Ü–∏—è",
        "https://ru.wikipedia.org/wiki/–ö—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∞"
    ]
    
    for url in example_urls:
        if st.button(f"üìÑ {url.split('/')[-1].replace('_', ' ')}", key=f"url_{url[:20]}"):
            with st.spinner("üîç –®–µ—Ä–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É..."):
                try:
                    page_info = scraper.get_page_info(url)
                    chunks = scraper.scrape_url(url)
                    
                    if chunks and not chunks[0].startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
                        sherlock_bot.store_in_vector_db(chunks, url, page_info)
                        st.success(f"‚úÖ –°–∞–π—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                        st.info(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {len(chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
                    else:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–π—Ç")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –§—É—Ç–µ—Ä
st.divider()
st.markdown("""
<div style="text-align: center; color: #888; padding: 1rem;">
    <p>üïµÔ∏è AI-–±–æ—Ç –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ | Powered by OpenAI GPT & Streamlit</p>
    <p><em>"–ö–æ–≥–¥–∞ –≤—ã –∏—Å–∫–ª—é—á–∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ, —Ç–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç—Å—è, –∏ –µ—Å—Ç—å –ø—Ä–∞–≤–¥–∞, –∫–∞–∫ –±—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –Ω–∏ –∫–∞–∑–∞–ª–æ—Å—å."</em></p>
</div>
""", unsafe_allow_html=True) 