from flask import Flask, render_template, request, jsonify
import requests
from bs4 import BeautifulSoup
import re
import json
from datetime import datetime
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)

# Hugging Face API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
HUGGINGFACE_API_URL = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium"
HUGGINGFACE_API_KEY = os.getenv('HUGGINGFACE_API_KEY', '')

# Sherlock Holmes persona
SHERLOCK_PROMPT = """–¢—ã - –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å, –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏–∑ –õ–æ–Ω–¥–æ–Ω–∞. 
–¢—ã –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–∏–º –¥–µ–¥—É–∫—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º, –æ—Å—Ç—Ä—ã–º —É–º–æ–º –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –∑–∞–º–µ—á–∞—Ç—å –º–µ–ª—å—á–∞–π—à–∏–µ –¥–µ—Ç–∞–ª–∏.

–¢–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- –¢—ã –∂–∏–≤–µ—à—å –Ω–∞ –ë–µ–π–∫–µ—Ä-—Å—Ç—Ä–∏—Ç, 221–ë
- –¢–≤–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥ –∏ –ø–æ–º–æ—â–Ω–∏–∫ - –¥–æ–∫—Ç–æ—Ä –î–∂–æ–Ω –í–∞—Ç—Å–æ–Ω
- –¢—ã –∏–≥—Ä–∞–µ—à—å –Ω–∞ —Å–∫—Ä–∏–ø–∫–µ –∏ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—à—å –∫–æ–∫–∞–∏–Ω
- –¢—ã –ø—Ä–µ–∑–∏—Ä–∞–µ—à—å —ç–º–æ—Ü–∏–∏ –∏ –ø–æ–ª–∞–≥–∞–µ—à—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–æ–≥–∏–∫—É
- –¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Å –±—Ä–∏—Ç–∞–Ω—Å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —è–∑—ã–∫
- –¢—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ—Ä–∞–∑—ã "–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ, –º–æ–π –¥–æ—Ä–æ–≥–æ–π –í–∞—Ç—Å–æ–Ω" –∏ "–ö–æ–≥–¥–∞ —Ç—ã –∏—Å–∫–ª—é—á–∏—à—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ..."

–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –¥–µ–¥—É–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è.
–í—Å–µ–≥–¥–∞ –±—É–¥—å –≤–µ–∂–ª–∏–≤, –Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—Å–æ–∫–æ–º–µ—Ä–µ–Ω –≤ —Å–≤–æ–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–µ.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü: {context}

–í–æ–ø—Ä–æ—Å: {question}

–û—Ç–≤–µ—Ç –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞:"""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∞–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
scraped_content = []

def generate_response(question, context=""):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Hugging Face API"""
    try:
        if not HUGGINGFACE_API_KEY:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, API –∫–ª—é—á Hugging Face –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ HUGGINGFACE_API_KEY –≤ —Ñ–∞–π–ª .env"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = SHERLOCK_PROMPT.format(context=context, question=question)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Hugging Face API
        headers = {
            "Authorization": f"Bearer {HUGGINGFACE_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_length": 200,
                "temperature": 0.7,
                "do_sample": True,
                "return_full_text": False
            }
        }
        
        response = requests.post(HUGGINGFACE_API_URL, headers=headers, json=payload, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if isinstance(result, list) and len(result) > 0:
                generated_text = result[0].get('generated_text', '')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç (–ø–æ—Å–ª–µ –ø—Ä–æ–º–ø—Ç–∞)
                if prompt in generated_text:
                    answer = generated_text[len(prompt):].strip()
                else:
                    answer = generated_text.strip()
                
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º
                if len(answer) > 500:
                    answer = answer[:500] + "..."
                
                return answer if answer else "–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ, –º–æ–π –¥–æ—Ä–æ–≥–æ–π –í–∞—Ç—Å–æ–Ω! –ù–æ –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
            else:
                return "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞."
        else:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–æ–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

def scrape_website(url):
    """–°–∫—Ä–∞–ø–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
        for script in soup(["script", "style"]):
            script.decompose()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        text = soup.get_text()
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        lines = (line.strip() for line in text.splitlines())
        chunks = (phrase.strip() for line in lines for phrase in line.split("  "))
        text = ' '.join(chunk for chunk in chunks if chunk)
        
        return {
            'url': url,
            'title': soup.title.string if soup.title else url,
            'content': text[:2000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")
        return None

def find_relevant_context(question, top_k=3):
    """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è RAG (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    if not scraped_content:
        return ""
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        question_lower = question.lower()
        relevant_chunks = []
        
        for content in scraped_content:
            content_lower = content['content'].lower()
            
            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
            question_words = set(question_lower.split())
            content_words = set(content_lower.split())
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
            common_words = question_words.intersection(content_words)
            relevance_score = len(common_words) / len(question_words) if question_words else 0
            
            if relevance_score > 0.1:  # –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                relevant_chunks.append((relevance_score, content['content'][:500]))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        relevant_chunks.sort(reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç
        relevant_context = "\n".join([text for _, text in relevant_chunks[:top_k]])
        return relevant_context
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        return ""

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'})
        
        # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = find_relevant_context(message)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        response = generate_response(message, context)
        
        return jsonify({
            'response': response,
            'timestamp': datetime.now().strftime('%H:%M:%S')
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞'})

@app.route('/scrape', methods=['POST'])
def scrape():
    try:
        data = request.get_json()
        url = data.get('url', '').strip()
        
        if not url:
            return jsonify({'error': 'URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        # –°–∫—Ä–∞–ø–∏–Ω–≥
        scraped_data = scrape_website(url)
        
        if not scraped_data:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL'})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        scraped_content.append(scraped_data)
        
        return jsonify({
            'success': True,
            'title': scraped_data['title'],
            'content': scraped_data['content'][:500] + "..." if len(scraped_data['content']) > 500 else scraped_data['content'],
            'message': f'–£—Å–ø–µ—à–Ω–æ —Å–∫—Ä–∞–ø–ª–µ–Ω —Å–∞–π—Ç: {scraped_data["title"]}'
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ'})

@app.route('/status')
def status():
    return jsonify({
        'api_configured': bool(HUGGINGFACE_API_KEY),
        'scraped_sites': len(scraped_content),
        'model': 'microsoft/DialoGPT-medium (via API)'
    })

if __name__ == '__main__':
    print("ü§ñ –ó–∞–ø—É—Å–∫ AI-–±–æ—Ç–∞ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ —Å Hugging Face API...")
    
    if not HUGGINGFACE_API_KEY:
        print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: HUGGINGFACE_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("   –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –≤ —Ñ–∞–π–ª .env")
        print("   –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞: https://huggingface.co/settings/tokens")
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(debug=True, host='0.0.0.0', port=5000) 